### leetcode_158_easy_用Read4读取N个字符 Ⅱ

![image-20210213114505378](leetcode_158_easy_用Read4读取N个字符 Ⅱ.assets/image-20210213114505378.png)

![image-20210213114526219](leetcode_158_easy_用Read4读取N个字符 Ⅱ.assets/image-20210213114526219.png)

![image-20210213114546400](leetcode_158_easy_用Read4读取N个字符 Ⅱ.assets/image-20210213114546400.png)

![image-20210213114558615](leetcode_158_easy_用Read4读取N个字符 Ⅱ.assets/image-20210213114558615.png)

![image-20210213114607981](leetcode_158_easy_用Read4读取N个字符 Ⅱ.assets/image-20210213114607981.png)

```c++
/**
 * The read4 API is defined in the parent class Reader4.
 *     int read4(char *buf4);
 */

class Solution {
public:
    /**
     * @param buf Destination buffer
     * @param n   Number of characters to read
     * @return    The number of actual characters read
     */
    int read(char *buf, int n) {
        
    }
};
```

#### 算法思路

相比于 leetcode_157_easy_用Read4读取N个字符 ，区别在于，read()可能被多次调用。而read4()会改变文件指针，使文件指针指向不确定的位置。

为了解决这个问题，将上次从文件中读取 且尚未被buf带出的字符，暂存在类成员变量中。

```c++
class Solution {
public:
	/**
	 * @param buf Destination buffer
	 * @param n   Number of characters to read
	 * @return    The number of actual characters read
	 */
	Solution()
	{
		charLeftNum = 0;
	}

	int read(char *buf, int n) {
		int curCharNum=0, charNeed=n, charUsedNum=0;
		char buf4[4];  //用于读取4个数据的缓冲区
		char temp[4];  //为了处理memcpy param overlap问题，设置的缓冲区

		//从类成员变量中读取暂存的字符
		charUsedNum = min(charNeed, charLeftNum);  //将要读入的字符数量
		memcpy(buf, charLeft, sizeof(char)*charUsedNum);
		charNeed -= charUsedNum;  //更新仍然需要的字符数量
		buf += charUsedNum;
		charLeftNum -= charUsedNum;  //更新字符缓存数量
		memcpy(temp, charLeft + charUsedNum, sizeof(char)*charLeftNum);  //更新字符缓存
		memcpy(charLeft, temp, sizeof(char)*charLeftNum);  //更新字符缓存
		//从文件中读取
		while (charNeed > 0 && (curCharNum = read4(buf4)))
		{
			charUsedNum = min(charNeed, curCharNum);
			//charLeftNum= curCharNum - charUsedNum;  //已经从文件中读取，没有通过buff带出的字符数量
			memcpy(buf, buf4, sizeof(char)*charUsedNum);
			buf += charUsedNum;
			charNeed -= charUsedNum;
		}
		//将从文件中读取的多余字符 缓存在成员变量中
		if (curCharNum > 0)  //如果至少从文件中进行了一次读取，则需要考虑将剩余字符写入缓存
		{
			charLeftNum = curCharNum - charUsedNum;  //已经从文件中读取，没有通过buff带出的字符数量
			memcpy(charLeft, buf4 + charUsedNum, sizeof(char)*charLeftNum);  //将字符写入缓存
		}

		return n - charNeed;
	}

private:
	int charLeftNum;  //已从文件中读取，尚未通过buff带出的字符数量
	char charLeft[4];  //已从文件中读取，尚未通过buff带出的字符 最多3个
};
```

