### leetcode_126_hard_单词接龙Ⅱ

![image-20210118154228384](leetcode_126_hard_单词接龙Ⅱ.assets/image-20210118154228384.png)

![image-20210118154251654](leetcode_126_hard_单词接龙Ⅱ.assets/image-20210118154251654.png)

```c++
class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {

    }
};
```

#### 算法思路

类似Dijkstra算法。从起点beginWord出发，每一步可以走到相邻的单词(仅转换一个字母)，直到到达终点endWord，或者访问到了所有节点 均未到达终点

将每一个单词的路径长度，存在hashmap中

具体流程如下

1. 初始化单词列表中每一个单词的距离 distance[]=INT_MAX
2. 使用dijkstra算法，计算到各个单词的距离
   1. 寻找距离为d的单词
   2. 分别扩展该单词的每一位，扩展为26个不同的字母
   3. 确保新单词在单词列表中
   4. 更新新单词的距离
   5. 存储新单词的前驱单词
3. 使用回溯算法，搜索从endWord到beginWord的路径。并reverse该路径

```c++
class Solution {
public:
	vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
		bool findNewWord;  //扩展节点标志位
		int i,d,cIndex;
		char letter;
		string curWord, newWord;
		unordered_map<string, int> distance;  //到达每个单词的距离
		unordered_map<string, int>::iterator distanceIterator;
		unordered_map<string, vector<string>> precursor;  //每个单词的前驱单词(可能有多个)
		vector<string> curPath;
		vector<vector<string>> result;

		//初始化每个单词的距离
		for (i = 0; i < wordList.size(); i++)
			distance[wordList[i]] = INT_MAX;
		distance[beginWord] = 0;
		if (distance.find(endWord) == distance.end())
			return result;
		//使用Dijkstra算法，计算到各个单词的距离
		for (d = 0; d < wordList.size(); d++)  //以距离为d的单词为基础，扩展新单词
		{
			findNewWord = false;  //目前 这一轮尚未扩展任何节点
			for (distanceIterator = distance.begin(); distanceIterator != distance.end(); distanceIterator++)
			{
				if (distanceIterator->second != d)
					continue;
				curWord = distanceIterator->first;
				//寻找相邻的单词
				for (cIndex = 0; cIndex < curWord.size(); cIndex++)  //尝试替换每个单词
				{
					for (letter = 'a'; letter <= 'z'; letter++)  //尝试替换成每一个字母
					{
						if (cIndex == 0)
							newWord = letter + curWord.substr(1);
						else
							newWord = curWord.substr(0, cIndex) + letter + curWord.substr(cIndex + 1);
						if (newWord == "hot")
							int temp = 0;
						if (distance.find(newWord) == distance.end())
							continue;
						if (distance[newWord] > d)  //发现了待扩展的单词
						{
							findNewWord = true;
							distance[newWord] = d + 1;
							precursor[newWord].push_back(curWord);
						}
					}
				}
			}
			if (!findNewWord)  //如果一轮没有扩展到任何新单词，则dijkstra算法结束
				break;
		}
		//计算路径
		if (distance[endWord]==INT_MAX)
			return result;
		backtrack(precursor, endWord, beginWord, curPath, result);
		for (i = 0; i < result.size(); i++)
			reverse(result[i].begin(),result[i].end());
		return result;
	}

	void backtrack(unordered_map<string, vector<string>> &precursor,string curWord,string beginWord, vector<string>& curPath, vector<vector<string>> &result)
	{
		//到达了终点
		if (curWord == beginWord)
		{
			curPath.push_back(beginWord);
			result.push_back(curPath);
			curPath.pop_back();
			return;
		}
		//未到达终点
		for (int i = 0; i < precursor[curWord].size(); i++)
		{
			curPath.push_back(curWord);
			backtrack(precursor, precursor[curWord][i], beginWord, curPath, result);
			curPath.pop_back();
		}
	}
};
```

